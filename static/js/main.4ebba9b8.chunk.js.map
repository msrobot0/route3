{"version":3,"sources":["components/Account.tsx","logo.svg","App.tsx","reportWebVitals.js","index.js"],"names":["Account","account","className","tokens","map","token","has","balance","href","address","abi","require","tokenAddresses","IndexPage","useState","accounts","setAccounts","web3Enabled","setWeb3Enabled","web3","Web3","ethEnabled","a","window","ethereum","enable","onClickConnect","alert","eth","getAccounts","accs","Promise","all","getBalance","tokenInst","Contract","methods","balanceOf","call","utils","fromWei","tokenBalances","newAccounts","src","logo","alt","onClick","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6iBAQe,SAASA,EAAT,GAEA,IADbC,EACY,EADZA,QAEA,OACE,qCAGI,qBAAKC,UAAU,SAAf,SACGD,EAAQE,OAAOC,KAAI,SAAAC,GAClB,OAAIA,EAAMC,IAER,qBAAKJ,UAAU,QAAf,SACE,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,gBAAf,gCACoBG,EAAME,QAD1B,+BAIA,mBAAGC,KAAK,qEAAR,0BANwBH,EAAMA,OAahC,qBAAKH,UAAU,QAAf,SACE,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,gBAAf,2DADF,6CAI2C,mBAAGM,KAAK,yBAAR,wBAJ3C,gBAD0BH,EAAMA,YAa1C,qBAAKH,UAAU,UAAf,SACA,qBAAKA,UAAU,UAAf,SACE,6DAAgCD,EAAQQ,kB,WC/CnC,MAA0B,iCCMnCC,EAAOC,EAAQ,KAQfC,EAAiB,CAAC,CACtBH,QAAS,6CACTJ,MAAO,QAuFMQ,EApFG,WAAO,IAAD,EACUC,mBAAwB,IADlC,mBACfC,EADe,KACLC,EADK,OAEgBF,oBAAS,GAFzB,mBAEfG,EAFe,KAEFC,EAFE,KAMlBC,EAAa,IAAIC,IAEfC,EAAU,uCAAG,sBAAAC,EAAA,yDAEc,qBAApBC,OAAOC,SAFD,wBAGfL,EAAO,IAAIC,IAAKG,OAAOC,UAHR,kBAKPD,OAAOC,SAASC,SALT,iCAON,GAPM,0DASN,GATM,kCAcV,GAdU,yDAAH,qDAkBVC,EAAc,uCAAG,8BAAAJ,EAAA,uEACVD,IADU,kCAEnBM,MAAM,4BAFa,cAKrBT,GAAe,GALM,SAOJC,EAAKS,IAAIC,cAPL,cAOjBC,EAPiB,iBAUKC,QAAQC,IAAIF,EAAK1B,IAAL,+BAAAkB,EAAA,MAAS,WAAOb,GAAP,eAAAa,EAAA,sEACvBH,EAAKS,IAAIK,WAAWxB,GADG,8BAGjBsB,QAAQC,IAAIpB,EAAeR,IAAf,uCAAmB,WAAOC,GAAP,iBAAAiB,EAAA,6DAEnDY,EAAY,IAAIf,EAAKS,IAAIO,SAASzB,EAAKL,EAAMI,SAFM,SAInCyB,EAAUE,QAAQC,UAAU5B,GAAS6B,OAJF,cAInD/B,EAJmD,yBAMlD,CACLF,MAAOA,EAAMA,MACbC,IAAKC,EAAU,EACfA,QAAQY,EAAKoB,MAAMC,QAAQjC,EAAS,WATmB,2CAAnB,wDAHK,cAGvCkC,EAHuC,yBAgBtC,CACLhC,UACAN,OAAQsC,IAlBmC,2CAAT,wDAVjB,QAUfC,EAVe,OAgCrB1B,EAAY0B,GAhCS,4CAAH,qDAoCpB,OACE,qBAAKxC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKyC,IAAKC,EAAM1C,UAAU,WAAW2C,IAAI,UAEtC5B,GAAe,wBAAQ6B,QAASpB,EAAjB,oBAHpB,oBAIIX,GAAYA,EAASgC,OAAS,GAAK,qBAAK7C,UAAU,WAAf,SACnCa,EAASX,KAAI,SAACH,GACd,OACE,qBAAKC,UAAU,UAAf,SACE,cAACF,EAAD,CAASC,QAASA,KADUA,EAAQQ,oBC9EnCuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4ebba9b8.chunk.js","sourcesContent":["import React from 'react'\nimport {AccountType, TokenType} from './Interfaces';\n\n\ntype PropTypes = {\n  account: AccountType\n}\n\nexport default function Account({\n  account\n}: PropTypes) {\n  return (\n    <>\n     \n     \n        <div className=\"tokens\">\n          {account.tokens.map(token => {\n            if (token.has) {\n            return (\n              <div className=\"token\" key={token.token}>\n                <div className=\"balance\">\n                  <div className=\"balance-value\">\n                  Congrats! You have {token.balance} super secret Mer tokens.\n                  \n                  </div>\n                  <a href=\"https://www.systempoetics.com/91c5100a-ecdf-4a66-b20c-62a078f63182\">Proceed.</a>\n                </div>\n              </div>\n\n            )\n            }else{\n              return (\n                <div className=\"token\" key={token.token}>\n                  <div className=\"balance\">\n                    <div className=\"balance-value\">\n                    In order to proceed you need some Mer tokens.\n                    </div>\n                   You dont have any. You can get some from  <a href=\"https://www.sushi.com/\">Sushi Swap</a> I think.\n                  </div>\n                </div>\n  \n              ) \n            }\n          })}\n        </div>\n        <div className=\"account\">\n        <div className=\"address\">\n          <small>FYI this is for wallet: {account.address}</small>\n        </div>\n      </div>\n    </>\n  )\n}","export default __webpack_public_path__ + \"static/media/logo.d5d645c5.svg\";","import Web3 from 'web3'\nimport Account from './components/Account';\nimport {AccountType, TokenType} from './components/Interfaces';\nimport './App.css';\nimport logo from './logo.svg'; \nimport { useState } from 'react'\nconst abi  = require('human-standard-token-abi');\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n\n\nconst tokenAddresses = [{\n  address: '0xd4f63a8aebb8b69165aa245a8ab103fc9fc9e706',\n  token: 'MER'\n}]\n\nconst IndexPage = () => {\n  const [accounts, setAccounts] = useState<AccountType[]>([])\n  const [web3Enabled, setWeb3Enabled] = useState(false)\n\n  // Empty web3 instance\n  \n  let web3: Web3 = new Web3()\n\n  const ethEnabled = async () => {\n\n    if (typeof window.ethereum !== 'undefined') {\n      web3 = new Web3(window.ethereum);\n      try {\n        await window.ethereum.enable();\n\n        return true\n      } catch (e) {\n        return false\n      }\n\n    }\n\n    return false;\n  }\n\n\n  const onClickConnect = async () => {\n    if (await !ethEnabled()) {\n      alert(\"Please install MetaMask!\");\n    }\n\n    setWeb3Enabled(true)\n\n    var accs = await web3.eth.getAccounts();\n\n\n    const newAccounts = await Promise.all(accs.map(async (address: string) => {\n      const balance = await web3.eth.getBalance(address)\n      \n      const tokenBalances = await Promise.all(tokenAddresses.map(async (token) => {\n\n        const tokenInst = new web3.eth.Contract(abi, token.address);\n        \n        const balance = await tokenInst.methods.balanceOf(address).call()\n\n        return {\n          token: token.token,\n          has: balance > 0,\n          balance:web3.utils.fromWei(balance, 'ether'),\n        }\n      }))\n\n      return {\n        address,\n        tokens: tokenBalances\n      }\n    }))\n\n    setAccounts(newAccounts)\n\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        \n         {!web3Enabled && <button onClick={onClickConnect}>Unlock</button>} Meredith's Vault\n         {accounts && accounts.length > 0 && <div className=\"accounts\">\n         {accounts.map((account) => {\n          return (\n            <div className=\"account\" key={account.address}>\n              <Account account={account} />\n            </div>\n          )\n          })}\n             \n          </div>\n          }\n      </header>\n    </div>\n  );\n}\n\nexport default IndexPage;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}